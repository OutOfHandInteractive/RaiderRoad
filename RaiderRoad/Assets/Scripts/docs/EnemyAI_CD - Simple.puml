@startuml

hide members

class EnemyRadio << (S,#FF7700) Singleton >> {

}

abstract class Enemy {
	-EnemyRadio _radioFoo
	-EnemyAI _ai
	
	+EnemyRadio getRadio()
	+EnemyAI getAI()
}
EnemyRadio <- Enemy
Enemy -> EnemyAI
UnityEngine.MonoBehavior <|-- Enemy

abstract class Vehicle{

}
Enemy <|-- Vehicle
abstract class Raider{

}
Enemy <|-- Raider

Vehicle <|-- LightVehicle
Vehicle <|-- MediumVehicle
Vehicle <|-- HeavyVehicle 

Raider <|-- Thief
Raider <|-- Hooligan
Raider <|-- Bruiser

abstract class EnemyAI{
	+EnemyAI(Enemy parent)
	+Enemy getParent()
	{abstract} +void start()
	{abstract} +void update()
	{abstract} +void end()
}
UnityEngine.MonoBehavior <|-- EnemyAI
abstract class EnemyAIState{
	+void update()
	+void start()
	{abstract} +void start(Intent)
	{abstract} +Intent updateState()
}
EnemyAI <|-- EnemyAIState
abstract class VehicleAI {
	+VehicleAI(Vehicle parent)
	+Vehicle getParent()
}
EnemyAIState <|-- VehicleAI
abstract class RaiderAI {
	+RaiderAI(Raider parent)
	+Raider getParent()
}
EnemyAIState <|-- RaiderAI

class StatefulAI {
	+void addState(StateID, EnemyAIState)
	+void setInitialState(StateID)
	+EnemyAIState currState()
	-void switchTo(StateID)
}
EnemyAIState o- StatefulAI
EnemyAI <|-- StatefulAI

RaiderAI <|-- FightState
RaiderAI <|-- WaitState

enum StateID {
	FIGHT
	WAIT
	...
}
StatefulAI -> StateID
class Intent {
	+Intent(Object,StateID)
	+Object getPayload()
	+StateID getAction()
}
StatefulAI -> Intent
EnemyAIState -> Intent
Intent -> StateID

class FightIntent {
	+FightIntent(Player)
	+Player getPayload()
}
Intent <|-- FightIntent

@enduml